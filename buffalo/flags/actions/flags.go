package actions

import (
	"github.com/dflynn15/rails-n-buffalo/buffalo/flags/models"
	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop"
	"github.com/pkg/errors"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Flag)
// DB Table: Plural (flags)
// Resource: Plural (Flags)
// Path: Plural (/flags)
// View Template Folder: Plural (/templates/flags/)

// FlagsResource is the resource for the Flag model
type FlagsResource struct {
	buffalo.Resource
}

// List gets all Flags. This function is mapped to the path
// GET /flags
func (v FlagsResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	flags := &models.Flags{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all Flags from the DB
	if err := q.All(flags); err != nil {
		return errors.WithStack(err)
	}

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)

	return c.Render(200, r.Auto(c, flags))
}

// Show gets the data for one Flag. This function is mapped to
// the path GET /flags/{flag_id}
func (v FlagsResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Flag
	flag := &models.Flag{}

	// To find the Flag the parameter flag_id is used.
	if err := tx.Find(flag, c.Param("flag_id")); err != nil {
		return c.Error(404, err)
	}

	setProjectIDToCOntext(c)

	return c.Render(200, r.Auto(c, flag))
}

// New renders the form for creating a new Flag.
// This function is mapped to the path GET /flags/new
func (v FlagsResource) New(c buffalo.Context) error {
	setProjectIDToCOntext(c)
	return c.Render(200, r.Auto(c, &models.Flag{}))
}

// Create adds a Flag to the DB. This function is mapped to the
// path POST /flags
func (v FlagsResource) Create(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	project := &models.Project{}

	// To find the Project the parameter project_id is used.
	if err := tx.Find(project, c.Param("project_id")); err != nil {
		return c.Error(404, err)
	}

	// Allocate an empty Flag
	flag := &models.Flag{}

	flag.ProjectID = project.ID

	// Bind flag to the html form elements
	if err := c.Bind(flag); err != nil {
		return errors.WithStack(err)
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(flag)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, flag))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", T.Translate(c, "flag.created.success"))
	// and redirect to the flags index page
	return c.Render(201, r.Auto(c, flag))
}

// Edit renders a edit form for a Flag. This function is
// mapped to the path GET /flags/{flag_id}/edit
func (v FlagsResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Flag
	flag := &models.Flag{}

	if err := tx.Find(flag, c.Param("flag_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, flag))
}

// Update changes a Flag in the DB. This function is mapped to
// the path PUT /flags/{flag_id}
func (v FlagsResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Flag
	flag := &models.Flag{}

	if err := tx.Find(flag, c.Param("flag_id")); err != nil {
		return c.Error(404, err)
	}

	// Bind Flag to the html form elements
	if err := c.Bind(flag); err != nil {
		return errors.WithStack(err)
	}

	verrs, err := tx.ValidateAndUpdate(flag)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, flag))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", T.Translate(c, "flag.updated.success"))

	// and redirect to the flags index page
	return c.Render(200, r.Auto(c, flag))
}

// Destroy deletes a Flag from the DB. This function is mapped
// to the path DELETE /flags/{flag_id}
func (v FlagsResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Project
	project := &models.Project{}

	// To find the Project the parameter project_id is used.
	if err := tx.Eager().Find(project, c.Param("project_id")); err != nil {
		
		return c.Error(404, err)
	}

	// Allocate an empty Flag
	flag := &models.Flag{}

	// To find the Flag the parameter flag_id is used.
	if err := tx.Find(flag, c.Param("flag_id")); err != nil {
		return c.Error(404, err)
	}

	if err := tx.Destroy(flag); err != nil {
		return errors.WithStack(err)
	}

	// If there are no errors set a flash message
	c.Flash().Add("success", T.Translate(c, "flag.destroyed.success"))

	// Redirect to the flags index page
	return c.Render(200, r.Auto(c, project))
}

func setProjectIDToCOntext(c buffalo.Context) error {
	c.Set("projectID", c.Param("project_id"))
	return nil
}
